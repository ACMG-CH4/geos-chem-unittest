#!/usr/bin/perl -w

#EOC
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: getRunInfo.pl
#
# !DESCRIPTION: Extracts information from the input.geos file
#  and passes the result to the root-level Makefile. Input argument
#  indicates index of information within a split string or is an identifier
#  for what information to return.
#\\
#\\
# !USES:
#
require 5.003;                   # Need this version of Perl or newer
use English;                     # Use English language
use Carp;                        # Get detailed error messages
use strict;                      # Use "IMPLICIT NONE" syntax
#
# !PUBLIC MEMBER FUNCTIONS
#  &getRunInfo
# 
# !CALLING SEQUENCE:
#  getRunInfo index
#    where index is the 0-based index of the run information within
#    the run directory name after splitting by '_'
#
# !REMARKS:
#  Designed for use with the root-level Makefile in a run directory copied
#  using gcCopyRunDirs in UnitTest/perl.
# 
# !REVISION HISTORY: 
#  06 Apr 2015 - E. Lundgren - Initial version
#EOP
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getRunInfo
#
# !DESCRIPTION: Extracts the run information from the run directory
#  name in input.geos.
#\\
#\\
# !INTERFACE:
#
sub getInfo($) {
#
# !INPUT PARAMETERS:
#
  # $index  : Index of run information within run directory name
  my ( $index ) = @_;
#
# !CALLING SEQUENCE:
#  &getInfo( $index );
#
# !REMARKS:

#
# !REVISION HISTORY:
#  06 Apr 2015 - E. Lundgren - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Scalars
  my $runstr  = ""; 
  my $line    = "";
  my $runinfo = "";

  # Arrays
  my @linestrings = ();
  my @runinfoarray = ();

  # Make sure that an input.geos file is found; otherwise print a "";
  if ( -f "./input.geos" ) {
  
    # get start run time if $index is 4, end run time is $index is 5
    if ( $index == 4 || $index == 5) {
        
      if ($index == 4) { $runstr = "Start" }
      if ($index == 5) { $runstr = "End" }
   
      # Grep for date & time in input.geos
      $line       = qx( grep "$runstr.*YYYYMMDD" ./input.geos );
      chomp( $line );
  
      # Split by spaces
      @linestrings    = split( ' ', $line );
  
      # Place into YYYYMMDDhhmm format
      $runinfo        = "$linestrings[4]$linestrings[5]";
      $runinfo        = substr( $runinfo, 0, 12 );
  
     } else {
 
      # Grep for input.geos header
      $line = qx( grep "GEOS-CHEM UNIT TEST SIMULATION" ./input.geos );
      chomp( $line );
      
      # Split by spaces
      @linestrings = split( ' ', $line );
      
      # Extract the original run directory name
      $runstr = "$linestrings[4]";
      
      # Split by '_' delimiter
      @runinfoarray  = split( '_', $runstr );
      
      # If the index is less than the # of rundirstrings,
      # extract the run information from the rundir name.
      # Else, set runinfo to 'n' (used as NEST for non-nested grid runs)
      if ( $index < 0+@runinfoarray ) {
         $runinfo = "$runinfoarray[$index]";
      } else {
         $runinfo = "n";
      }
    }				
  }

  # Print the result
  print "$runinfo";
  
  return(0)
}
#EOP
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Driver routine for the getRunInfo script.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  getRunInfo INDEX
#
# !REVISION HISTORY:
#  07 Apr 2015 - E. Lundgren - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $msg = "Out of bounds error within getRunInfo";

  # If there is the proper # of args, validate the GEOS-Chem files
  # Otherwise exit with an error message
  if ( scalar( @ARGV ) >= 0 && scalar( @ARGV ) <= 5 ) {
    &getInfo( @ARGV       ); 
  } else { 
    print "$msg"; 
    exit(1);    
  }

  # Always return 0 so we don't halt the make process
  return ( 0 );
}

#------------------------------------------------------------------------------

# Call the main program
main();


# Return normally
exit(0);
#EOC
