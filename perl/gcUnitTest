#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: gcUnitTest
#
# !DESCRIPTION: This perl script is the driver for the GEOS-Chem Unit Tester,
#  which submits several automatic debugging jobs.
#\\
#\\
# !USES:
#
require 5.003;                       # Need this version of Perl or newer
use English;                         # Use English language
use Carp;                            # Get detailed error messages
use strict;
use Dates   qw( &getLocalTime   );   # Get routines from Dates.pm
use UtUtils qw( &baseName
                &checkDir
                &cleanDir
                &makeHemcoCfg
                &makeInputGeos
                &parse         
                &readResults       
                &makeMatrix     );
#
# !PUBLIC DATA MEMBERS:
#

# Directories
our $CODE_DIR        = "";         # GEOS-Chem Code directory
our $DATA_ROOT       = "";         # Root path for GEOS-Chem data directory
our $HEMCO_ROOT      = "";         # Root path for HEMCO emissions files
our $JOB_DIR         = "";         # Unit Test job directory
our $LOG_DIR         = "";         # Unit Test logs directory
our $PERL_DIR        = "";         # Unit Test Perl directory
our $RUN_ROOT        = "";         # Unit Test top-level run directory
our $RUN_DIR         = "";         # Unit Test run directory subdirectory

# Files
our $RESULTS         = "";         # Results.log file
our $TEMPLATE        = "";         # Template web page
our $WEB_GRID        = "";         # Web page w/ unit text matrix
our $WEB_PUSH        = "NONE";     # Remote server for web page push

# Options
our $COMPILER        = "";         # Compiler variable for GEOS-Chem
our $MAKE_CMD        = "";         # Make command with debug options
our $SUBMIT          = "";         # Queue submit command
our $VERSION         = "";         # GEOS-Chem version ID
our $DESCRIBE        = "";         # Short description of unit tests
our $VERBOSE         = "3";        # HEMCO verbose setting (0-3)
our $WARNINGS        = "3";        # HEMCO warnings setting (0-3)

# SLURM parameters (optional)
our $SLURM_CPUS      = "";         # SLURM: Number of CPUs (-n)
our $SLURM_NODES     = "";         # SLURM: Number of nodes (-N)
our $SLURM_TIME      = "";         # SLURM: Run time (-t D-hh:mm)
our $SLURM_MEM       = "";         # SLURM: Memory per node (MB)
our $SLURM_MEMPERCPU = "";         # SLURM: Memory per CPU (MB)
our $SLURM_PARTITION = "";         # SLURM: Partition (aka queue) name
our $SLURM_STDOUT    = "";         # SLURM: Stdout stream
our $SLURM_STDERR    = "";         # SLURM: Stderr stream
our $SLURM_MAILUSER  = "";         # SLURM: Email to send reports to
#		
# !PUBLIC MEMBER FUNCTIONS:
#  &main()     : Driver routine for gcUnitTest
#
# !PRIVATE MEMBER FUNCTIONS:
#  &getRunDir  : Returns the name of the GEOS-Chem run directory
#  &makeInputs : Creates the input.geos file the run directory 
#  &doUnitTest : Reads user options from a file and starts the unit test
#
# !CALLING SEQUENCE:
#  gcUnitTest [ OPTIONS-FILENAME ] [ DRYRUN ]
#
# !REMARKS:
#  If no value is passed for OPTIONS-FILENAME, then gcUnitTest will
#  read user options from the input file: "UnitTest.input".
#
# !REVISION HISTORY: 
#  22 Aug 2013 - R. Yantosca - Initial version
#  04 Apr 2014 - R. Yantosca - Now can push the web page to a remote server
#  27 Jun 2014 - R. Yantosca - Updated for HEMCO emissions
#  02 Jul 2014 - R. Yantosca - Now accepts optional DRYRUN argument, which
#                              will set up input files but not run unit tests
#  28 Jul 2014 - R. Yantosca - End date/time can be YYYYMMDDhh or YYYYMMDDhhmm
#  19 May 2015 - R. Yantosca - Now add VERBOSE and WARNINGS global variables
#  19 Jun 2015 - R. Yantosca - Added optional SLURM tags
#EOP
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getRunDir
#
# !DESCRIPTION: Returns the unit test run directory for a given combination
#  of met field, grid, simulation type, and nested-grid type.
#\\
#\\
# !INTERFACE:
#
sub getRunDir($$$$) {
#
# !INPUT PARAMETERS:
#
  # $met  : Met field type
  # $grid : Horiziontal grid
  # $nest : Nested grid option (if necessary)
  # $sim  : Simulation type
  my ( $met, $grid, $nest, $sim ) = @_;
#
# !RETURN VALUE:
#
  my $runDir = ""; 
#
# !CALLING SEQUENCE:
#  &doUnitTest( "UnitTest.input" );
#
# !REVISION HISTORY:
#  22 Aug 2013 - R. Yantosca - Initial version
#  31 Jan 2014 - R. Yantosca - Now append the nested grid suffix if
#                              length( $nest ) is greater than zero
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Run directory string
  my $runLoc = "{MET}_{GRID}_{SIM}";

  # Append nested grid string if necessary
  if ( length( $nest ) > 0 ) { $runLoc .= "_{NEST}"; }

  # Replace tokens
  $runLoc =~ s/{MET}/$met/g;
  $runLoc =~ s/{GRID}/$grid/g;
  $runLoc =~ s/{SIM}/$sim/g;
  $runLoc =~ s/{NEST}/$nest/g;
  $runDir = "$RUN_DIR";
  $runDir =~ s/{RUNDIR}/$runLoc/g;
  
  # Return the run directory
  return( $runDir );
}
#EOP
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: makeInputs
#
# !DESCRIPTION: Creates the input.geos file in a unit-test run-directory.
#  It starts with a template file and then replaces some tokens to customize
#  the input.geos file for the given simulation.
#\\
#\\
# !INTERFACE:
#
sub makeInputs($$$$$$$$) {
#
# !INPUT PARAMETERS:
#
  # $start  : Start date of test simulation (YYYYMMDDhh                )
  # $end    : End   date of test simulation (YYYYMMDDhh or YYYYMMDDhhmm)
  # $runDir : Run directory
  my ( $start, $end, $runDir, $met, $grid, $nest, $sim ) = @_;
#
# !CALLING SEQUENCE:
#  &makeInputFiles( $start, $end, $runDir );
#
# !REVISION HISTORY:
#  22 Aug 2013 - R. Yantosca - Initial version
#  27 Jun 2014 - R. Yantosca - Updated for the HEMCO_Config.rc file
#  30 Jun 2014 - R. Yantosca - Now accept $nest via the arg list
#  02 Jul 2014 - R. Yantosca - Now pass $start to routine &makeHemcoCfg
#  28 Jul 2014 - R. Yantosca - Now accept $end as YYYYMMDDhhmm or YYYMMDDhh
#  03 Sep 2014 - R. Yantosca - Now call &getHemcoEndTime
#  23 Sep 2014 - R. Yantosca - Remove call to &getHemcoEndTime.  The HEMCO
#                              restart timestamp is now the same as $end.
#  19 May 2015 - R. Yantosca - Pass $VERBOSE, $WARNINGS to &makeHemcoCfg
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Strings
  my $d0      = "";
  my $h0      = "";
  my $d1      = "";
  my $h1      = "";
  my $inpTmpl = "$runDir/input.geos.template";
  my $inpGeos = "$runDir/input.geos";
  my $hcoTmpl = "$runDir/HEMCO_Config.template";
  my $hcoCfg  = "$runDir/HEMCO_Config.rc";
  my $errMsg  = "makeInputs: END must be YYYYMMDDhh or YYYYMMDDhhmm!";
  my $hcoEnd  = ""; 

  # Get start date and hour
  $d0         = substr( $start, 0, 8 );
  $h0         = substr( $start, 8, 2 );
  $h0        .= "0000";

  # Get end date and hour
  $d1         = substr( $end,   0, 8 );

  # Compute the ending hour (hhmmss) from the ending string, 
  # which may be in either YYYYMMDDhhmm or YYYYMMDDhh format
  if    ( length( $end ) == 12 ) { $h1 = substr( $end, 8, 4 ) . "00";   } 
  elsif ( length( $end ) == 10 ) { $h1 = substr( $end, 8, 2 ) . "0000"; }
  else                           { print "$errMsg\n"; exit(1);          }

  # Make the input.geos file in the run directory
  &makeInputGeos( $d0, $h0, $d1, $h1, $DATA_ROOT, $inpTmpl, $inpGeos );

  # Make the HEMCO_Config.rc file in the run directory
  &makeHemcoCfg( $hcoTmpl, $start,   $met,      $grid,       $nest,    
                 $sim,     $VERBOSE, $WARNINGS, $HEMCO_ROOT, $hcoCfg );

  # Return 
  return( $? );
}
#EOC
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: makeSlurmTags
#
# !DESCRIPTION: Creates the #SBATCH tags that are needed to submit the unit 
#  test job to a computer system that uses the SLURM scheduler.
#\\
#\\
# !INTERFACE:
#
sub makeSlurmTags() {
#
#
# !CALLING SEQUENCE:
#  @slurmTags = &makeSlurmTags();
#
# !REVISION HISTORY:
#  21 Mar 2014 - R. Yantosca - Initial version
#  24 Mar 2014 - R. Yantosca - Now pass %unitTests hash as an argument
#  07 Apr 2014 - R. Yantosca - Now make $webFile chmod 664
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my @slurm = ();

  # Number of CPUs
  if ( length( $SLURM_CPUS ) > 0 ) {  
    @slurm = ( @slurm, "\n\# === SLURM: Number of CPUs ===\n",
                       "\#SBATCH -n $SLURM_CPUS\n",
                       "export OMP_NUM_THREADS=$SLURM_CPUS\n" ); 
  }

  # Number of nodes
  if ( length( $SLURM_NODES ) > 0 ) { 
    @slurm = ( @slurm, "\n\# === SLURM: Number of nodes ===\n", 
                       "\#SBATCH -N $SLURM_NODES\n" );
  }

  # Time requested
  if ( length( $SLURM_TIME ) > 0 ) { 
    @slurm = ( @slurm,  "\n\# === SLURM: Time requested ===\n",
                        "\#SBATCH -t $SLURM_TIME\n" );  
  }

  # Mem per node
  if ( length( $SLURM_MEM ) > 0 ) {
    @slurm = ( @slurm, "\n\# === SLURM: Memory per node ===\n",
                       "\#SBATCH --mem-per-cpu=$SLURM_MEM\n" ); 
  }
  
  # Mem per CPU
  if ( length( $SLURM_MEMPERCPU ) > 0 ) {
    @slurm = ( @slurm, "\n\# === SLURM: Memory per CPU ===\n",
                       "\#SBATCH --mem-per-cpu=$SLURM_MEMPERCPU\n" ); 
  }

  # Partition
  if ( length( $SLURM_PARTITION ) > 0 ) {
    @slurm = ( @slurm, "\n\# === SLURM: Partition (aka queue) ===\n",
                       "\#SBATCH -p $SLURM_PARTITION\n" ); 
  }

  # Email
  if ( length( $SLURM_MAILUSER ) > 0 ) {
    @slurm = ( @slurm, "\n\# === SLURM: User email address ===\n",
                       "\#SBATCH --mail-user=$SLURM_MAILUSER\n" ); 
  }

  # Stdout stream
  if ( length( $SLURM_STDOUT ) > 0 ) {
    @slurm = ( @slurm, "\n\# === SLURM: Unix stdout stream ===\n",
                       "\#SBATCH -o $SLURM_STDOUT\n" ); 
  }

  # Stderr stream
  if ( length( $SLURM_STDERR ) > 0 ) {
    @slurm = ( @slurm, "\n\# === SLURM: Unix stderr stream ===\n",
                       "\#SBATCH -e $SLURM_STDERR\n" ); 
  }

  # Return list of SLURM tags
  return( @slurm );
}
#EOP
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: doUnitTest
#
# !DESCRIPTION: Reads the input file name (containing user-specified options)
#  file and creates a job script.  The job script (which can be submitted to
#  a computational queue) will be used to call Makefiles to compile and run 
#  GEOS-Chem with debugging options.
#\\
#\\
# !INTERFACE:
#
sub doUnitTest($$) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File in which unit test options are listed
  # $dryRun   : If =1, will set up input files, but not submit unit test job 
  my ( $fileName, $dryRun ) = @_;
#
# !CALLING SEQUENCE:
#  &doUnitTest( $fileName );
#
# !REVISION HISTORY:
#  22 Aug 2013 - R. Yantosca - Initial version, based on sleepNrt
#  27 Aug 2013 - R. Yantosca - Now add $PERL_DIR to the make command
#  28 Aug 2013 - R. Yantosca - Now call &cleanDir from UtUtils.pm
#  28 Aug 2013 - R. Yantosca - Minor bug fixes.  Also now send results
#                              to a separate file from stdout.
#  29 Aug 2013 - R. Yantosca - Make sure that $met, $grid, $nest are in
#                              lowercase, regardless of input
#  05 Sep 2013 - R. Yantosca - Now the user must explicitly call the separate
#                              cleanFiles program to remove files in the
#                              job & log dirs.  Still need to work on cleaning
#                              up all files in the run dirs.
#  05 Sep 2013 - R. Yantosca - Now print log directory name
#  30 Jan 2014 - R. Yantosca - Improve informational output
#  31 Jan 2014 - R. Yantosca - Now allow for extra Makefile flags
#  24 Apr 2014 - R. Yantosca - Now update the web page after each unit test
#                              so that we can have a running display
#  30 Jun 2014 - R. Yantosca - Now pass $nest to &makeInputs
#  28 Jul 2014 - R. Yantosca - Improved comments.  Now call routine &makeInputs
#                              before saving the commands for the master script
#  03 Sep 2014 - R. Yantosca - If $end is in YYYYMMDDhh format, then convert
#                              to YYYYMMDDhhmm format by adding "00"
#  23 Sep 2014 - R. Yantosca - The timestamp for the HEMCO restart file is
#                              now the same as $end.
#  06 Mar 2015 - R. Yantosca - Skip lines that only have whitespace
#  11 Mar 2015 - R. Yantosca - Now do not write START, END, HMCO_END to the
#                              job script.  We now get these values by parsing
#                              the input.geos in each run directory.
#  13 Mar 2015 - M. Sulprizio- Now get username for file paths
#  10 Apr 2015 - E. Lundgren - Remove MET and GRID from make command and
#                              now use UT/perl/Makefile for unit testing.
#  19 May 2015 - R. Yantosca - Now look for VERBOSE, WARNINGS in input file
#  18 Jun 2015 - M. Sulprizio- Now use home directory for file paths
#  18 Jun 2015 - R. Yantosca - Use mkdir -p instead of mkdirhier
#  22 Jun 2015 - R. Yantosca - Now append SLURM #SBATCH tags to job file
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Scalars
  my $cmd     = "";
  my $end     = "";
  my $extra   = "";
  my $grid    = "";
  my $hcoEnd  = "";
  my $jobFile = "";
  my $logHdr  = "";
  my $logRslt = "";
  my $logTop  = "";
  my $met     = "";
  my $makeCmd = ""; 
  my $nest    = "";
  my $notDir  = "";
  my $runDir  = "";
  my $sim     = "";
  my $status  = "";
  my $stdout  = "";
  my $start   = "";
  my $locTime = "";

  # Arrays
  my @cmds    = ();
  my @slurm   = ();
  my @txt     = ();

  # Unix environment settings
  my $home    = $ENV{"HOME"};
  my $user    = $ENV{"USER"};

  #---------------------------------------------------------------------------
  # Read options from the input file
  #---------------------------------------------------------------------------
  
  # Read entire file into an array and remove newlines
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @txt = <I> );
  close( I );

  # Loop thru each line in the file; parse information into global variables
  for ( my $i = 0; $i < scalar( @txt ); $i++ ) {

    # Skip if the line only has whitespace
    while ( $txt[$i] =~ /^\s*$/ ) { $i++ };

    #------------------------------------------------------------------------
    # Get values for global options (these precede the list of simulations)
    # Skip over lines beginning with the # comment character
    #
    # PLEASE NOTE THAT THE FOLLOWING ORDER MUST BE OBSERVED:
    # (1) VERSION   has to be listed last of all
    # (2) DATA_ROOT has to be listed before HEMCO_ROOT
    # (3) RUN_ROOT  has to be listed before RUN_DIR
    # (3) WEB_GRID  has to be listed before WEB_PUSH
    #------------------------------------------------------------------------
    if ( !( $txt[$i] =~ m/\#/ ) ) { 
      if    ( $txt[$i] =~ "CODE_DIR"        ) { $CODE_DIR = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "COMPILER"        ) { $COMPILER = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "DATA_ROOT"       ) { $DATA_ROOT = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "HEMCO_ROOT"      ) { $HEMCO_ROOT = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "JOB_DIR"         ) { $JOB_DIR   = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "LOG_DIR"         ) { $LOG_DIR   = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "MAKE_CMD"        ) { $MAKE_CMD  = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "PERL_DIR"        ) { $PERL_DIR  = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "RUN_ROOT"        ) { $RUN_ROOT  = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "RUN_DIR"         ) { $RUN_DIR   = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "SUBMIT"          ) { $SUBMIT    = 
						  &parse( $txt[$i] ); } 
      elsif ( $txt[$i] =~ "TEMPLATE"        ) { $TEMPLATE  = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "WEB_GRID"        ) { $WEB_GRID  = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "WEB_PUSH"        ) { $WEB_PUSH  = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "VERBOSE"         ) { $VERBOSE   = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "WARNINGS"        ) { $WARNINGS  = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_CPUS"      ) { $SLURM_CPUS = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_NODES"     ) { $SLURM_NODES = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_TIME"      ) { $SLURM_TIME = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_MEM"       ) { $SLURM_MEM = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_MEMPERCPU" ) { $SLURM_MEMPERCPU = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_PARTITION" ) { $SLURM_PARTITION = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_MAILUSER"  ) { $SLURM_MAILUSER = 
						  &parse( $txt[$i] ); }     
      elsif ( $txt[$i] =~ "SLURM_STDOUT"    ) { $SLURM_STDOUT = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "SLURM_STDERR"    ) { $SLURM_STDERR = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "DESCRIPTION"     ) { $DESCRIBE  = 
						  &parse( $txt[$i] ); }
      elsif ( $txt[$i] =~ "VERSION"         ) { $VERSION   = 
						  &parse( $txt[$i] ); }
    }

    #------------------------------------------------------------------------
    # Get information about requested unit test simulations
    #------------------------------------------------------------------------
    elsif ( $txt[$i] =~ "!RUNS"     ) {

      # Append the version tag to the log directory
      # So that we can keep several log files simultaneously
      $LOG_DIR =~ s/{VERSION}/$VERSION/g;
      $LOG_DIR =~ s/{HOME}/$home/g;
      if ( !( -f $LOG_DIR ) ) { qx( mkdir -p $LOG_DIR ); }

      # Replace directory tokens in a few more variables
      $CODE_DIR     =~ s/{HOME}/$home/g;
      $RUN_ROOT     =~ s/{HOME}/$home/g;
      $JOB_DIR      =~ s/{HOME}/$home/g;
      $PERL_DIR     =~ s/{HOME}/$home/g;
      $TEMPLATE     =~ s/{PERLDIR}/$PERL_DIR/g;
      $WEB_GRID     =~ s/{VERSION}/$VERSION/g;
      $WEB_GRID     =~ s/{LOGDIR}/$LOG_DIR/g;
      $HEMCO_ROOT   =~ s/{DATAROOT}/$DATA_ROOT/g;
      $RUN_DIR      =~ s/{RUNROOT}/$RUN_ROOT/g;
      $WEB_PUSH     =~ s/\|/:/g;
      $SLURM_STDOUT =~ s/{LOGDIR}/$LOG_DIR/g;
      $SLURM_STDOUT =~ s/{VERSION}/$VERSION/g;
      $SLURM_STDERR =~ s/{LOGDIR}/$LOG_DIR/g;
      $SLURM_STDERR =~ s/{VERSION}/$VERSION/g;

      # Make sure each of these directories exist before proceeding
      &checkDir( $DATA_ROOT  );
      &checkDir( $HEMCO_ROOT );
      &checkDir( $CODE_DIR   );
      &checkDir( $JOB_DIR    );
      &checkDir( $LOG_DIR    );
      &checkDir( $PERL_DIR   );

      # Skip over comment lines
      while ( $txt[$i] =~ m/^\#/ ) { $i++ }

      # Loop over all requested simulations
      while ( !($txt[$i] =~ m/END/ ) ) { 

        # Skip if the line only has whitespace
	while ( $txt[$i] =~ /^\s*$/ ) { $i++; }
     
	# Skip lines beginning with comments
	if ( !( $txt[$i] =~ m/^\#/ ) ) {

	  #-----------------------------------------------------------------
	  # Parse each line that specifies an individual unit test.
	  # Remove extraneous characters wherever necessary.
	  #-----------------------------------------------------------------

	  # Parse each line into values
	  ( $met,   $grid, $nest, $sim, 
	    $start, $end,  $extra       ) = split( ' ', $txt[$i] );

	  # Make sure met, grid, nest are in lowercase
	  $met     =~ tr/[A-Z]/[a-z]/;
	  $grid    =~ tr/[A-Z]/[a-z]/;
	  $nest    =~ tr/[A-Z]/[a-z]/;

	  # Remove extraneous characters from $met
	  $met     =~ s/\-//g;
	  $met     =~ s/\_//g;
	  $met     =~ s/\=//g;
	  $met     =~ s/\.//g;

	  # Remove extraneous characters from $nest
	  $nest    =~ s/\-//g;
	  $nest    =~ s/\_//g;
	  $nest    =~ s/\.//g;

	  # Remove extraneous characters from $extra
	  $extra   =~ s/\-//g;
	  $extra   =~ s/\_//g;
	  $extra   =~ s/\.//g;

	  # Define the run directory name
	  $runDir   = &getRunDir( $met, $grid, $nest, $sim );
	  &checkDir( $runDir );

	  # Get the directory name minus the full path
	  $notDir   = &baseName( $runDir );

	  #-----------------------------------------------------------------
	  # Create the input.geos and HEMCO_Config.rc files from templates 
	  # in the run directory for each requested unit test.  This has
	  # to be done first, since the unit test commands will (likely)
	  # be executed from within a computational queue system.
	  #-----------------------------------------------------------------

	  # If $end is in YYYYMMDDhh format, then force it to be YYYYMMDDhhmm
	  if ( length( $end ) == 10 ) { $end .= "00"; }

	  # Make the input.geos and HEMCO_Config.rc file in the run directory
	  # Returns the timestamp for the HEMCO restart file 
	  &makeInputs( $start, $end,  $runDir, $met, $grid, $nest, $sim );
   
	  #-----------------------------------------------------------------
	  # Create the list of comamnds that will execute each requested
	  # unit test.  Store these commands in the @cmds array.
	  #-----------------------------------------------------------------

	  # Construct the make command, for single & multi processor.
	  # MET, GRID, NEST, START, and END are retrieved from
	  # within Makefile using getRunInfo (ewl, 4/10/15) 
	  $makeCmd  = "$MAKE_CMD COMPILER=$COMPILER RUN_DIR=$runDir";
	  $makeCmd .= " SIM=$sim VERSION=$VERSION LOG_DIR=$LOG_DIR";
	  $makeCmd .= " CODE_DIR=$CODE_DIR PERL_DIR=$PERL_DIR";
 
	  # Stdout log file.  If we are using the SLURM scheduler, then
	  # set the $stdout variable to the value in $SLURM_STDOUT.
	  $stdout   = "$LOG_DIR/$VERSION.stdout.log";
	  if ( length( $SLURM_STDOUT ) > 0 ) { $stdout = $SLURM_STDOUT; }

	  # The main log file
	  $logRslt  = "$LOG_DIR/$VERSION.results.log";
	  $RESULTS  = $logRslt;

	  # If necessary, also add on the nested grid flags
	  if ( length( $nest ) > 0  ) { $makeCmd .= " NEST=$nest"; }
	
	  # If necessary, also add extra Makefile options that are specific 
	  # to each simulaton.  Specify these in the "EXTRA?" column.
	  if ( length( $extra ) > 0 ) { $makeCmd .= " $extra"; }

	  # Save make commands to an array for use below.
	  # Temporarily copy Makefile to run dir for unit test (ewl, 4/10/15)
	  @cmds = ( @cmds, 
		    "\n\n\# %%% $notDir %%%\n",
		    "cp -f $PERL_DIR/Makefile $runDir\n",
		    "cd $runDir >> $stdout\n\n",
 	            "$makeCmd unittest >> $stdout\n", #);
		    "rm -f Makefile\n",
                    "\n\# %%% Create web page w/ unit test matrix %%%\n",
                    "cd $PERL_DIR >> $stdout\n",
        "./gcUtWeb $RUN_ROOT $RESULTS $TEMPLATE $WEB_GRID $WEB_PUSH >>$stdout\n"
	          );
        }

	# Increment counter
	$i++;
      }
    }	
  }

  #--------------------------------------------------------------------------
  # Write the commands archived above into the master job script.  This 
  # script will copy UT/perl/Makefile to the run directory of each requested 
  # unit test to compile and run GEOS-Chem w/ the specified options.
  #--------------------------------------------------------------------------

  # Make the 
  @slurm = &makeSlurmTags();

  # Get local time
  $locTime = &getLocalTime();

  # Make some text for the top of the log file that will hold results
  $logHdr = "%" x 79;
  $logTop = <<EOF;
echo "$logHdr"                                                 >> $logRslt
echo "%%%"                                                     >> $logRslt
echo "%%%  GEOS-CHEM UNIT TEST RESULTS FOR VERSION: $VERSION"  >> $logRslt
echo "%%%  job sent to queue @ $locTime"                       >> $logRslt
echo "%%%"                                                     >> $logRslt
echo "%%%  DESCRIPTION: $DESCRIBE"                             >> $logRslt
echo "%%%"                                                     >> $logRslt
echo "%%%  This is the main log file, which shows output from" >> $logRslt
echo "%%%  each individual phase of the unit test sequence."   >> $logRslt
echo "%%%"                                                     >> $logRslt
echo "%%%  Log files from individual unit-test runs are also"  >> $logRslt
echo "%%%  stored in this same directory."                     >> $logRslt
echo "%%%"                                                     >> $logRslt
echo "$logHdr"                                                 >> $logRslt
EOF

  # Add some more commands to the top of the job script
  # Call gcUtWeb to generate the matrix of results as a web page
  @cmds = ( '#!/bin/bash'."\n\n",
            "\#"x79,
            "\n\# Job script for unit test: $VERSION\n\# $DESCRIBE\n",
            "\#"x79,"\n",
            @slurm,
            "\nset \-e\n", 
	    "$logTop\n", 
            @cmds );

  # WRITE the make commands to a job file
  $jobFile = "$JOB_DIR/job.$VERSION";
  open( O, ">$jobFile" ) or die "Cannot open $jobFile!\n";
  print O @cmds;
  close( O );
  chmod( 0755, $jobFile );

  #--------------------------------------------------------------------------
  # Execute the unit test master script.  This will more than likely be
  # done in a computational queue.  
  #
  # FOR DEBUGGING: If the $dryRun option is set, then just generate the 
  # master job script but do not start the unit tests.
  #--------------------------------------------------------------------------

  # Print info about the job
  print '%%%%%%%%% GEOS-Chem UNIT TEST SIMULATION(S) %%%%%%%%%%%%%%%%%%'."\n";
  print "\%\%\% Version ID         : $VERSION\n";
  print "\%\%\% Testing code in    : $CODE_DIR\n";
  print "\%\%\% Using job file:    : $jobFile\n";
  print "\%\%\% Log file directory : $LOG_DIR\n";
  print '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'."\n";

  # Submit the job.  Send the stdout stream to $logRslt
  # and the stderr stream to a file in the $LOG_DIR.
  if ( ! $dryRun  ) { 
    $cmd = "cd $LOG_DIR; $SUBMIT $jobFile\n";
    chomp( $status = qx( $cmd ) );
    print "$status\n";
  }
  				
  # Return normally
  return( $? );
}
#EOP
#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Driver program for the gcUnitTest script.
#\\
#\\
# !INTERFACE:
#
sub main(@) {
#
# !CALLING SEQUENCE:
#  doUnitTest OPTIONS-FILENAME DRYRUN
#
# !REVISION HISTORY:
#  23 May 2013 - R. Yantosca - Initial version, based on NRT-ARCTAS
#  02 Jul 2014 - R. Yantosca - Now accepts DRYRUN argument, which will set up
#                              input files but not submit the unit test job
#EOP
#------------------------------------------------------------------------------
#BOC

  # If the user passes a filename from the command line, use it
  # Otherwise, default to "UnitTest.input"
  if    ( scalar( @ARGV ) == 2 ) { &doUnitTest( @ARGV               ); }
  elsif ( scalar( @ARGV ) == 1 ) { &doUnitTest( $ARGV[0],         0 ); }
  else                           { &doUnitTest( "UnitTest.input", 0 ); }

  # Exit and pass status code back
  return( $? );
}
#EOC
#------------------------------------------------------------------------------

# Call main program
main();

# Exit and pass status code back to Unix shell
exit( $? );


