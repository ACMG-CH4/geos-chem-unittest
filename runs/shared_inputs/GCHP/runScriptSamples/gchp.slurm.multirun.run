#!/bin/bash

#SBATCH -n 6
#SBATCH -N 1
#SBATCH -t 0-1:00
#SBATCH -p huce_intel
#SBATCH --mem=50000
#SBATCH --mail-type=ALL

# Initial version: Lizzie Lundgren, 7/12/2018

# This run script is for use within gchp_slurm.multirun.sh which submits 
# multiple consecutive GCHP jobs to break up longer runs into smaller jobs of 
# shorter duration.
#
# NOTES:
#  1. This run script is used within gchp_slurm.multirun.sh and should not 
#     be used on its own. Use gchp_slurm.run instead if not doing 
#     multi-segmented runs.
#  2. All stdout is sent to gchp.log without deleting the existing file.
#  3. runConfig.sh is NOT sourced within this run script. Sourcing that file
#     is done in gchp_slurm.multirun.sh prior to submitting the very first job.
#  4. cap_restart is not deleted but the content is sent to cap_restart.log.

# See SLURM documentation for descriptions of the above settings as well
# as many other settings you may use.

# Define GEOS-Chem log file
log="gchp.log"

if [[ $? == 0 ]]; then

    # Set and source your bashrc. Change this to whatever env file
    # used during GCHP compilation. You can copy or adapt sample bashrc
    # files located in ./bashrcSamples subdirectory.
    BASHRC=./set_your_gchp_env.bashrc
    if [ ! -f $BASHRC ] 
    then
       printf "ERROR: BASHRC environment variable in run script is not set!\nCopy or adapt a bashrc from the ./bashrcSamples subdirectory\nprior to running. Use the same environment file used for compilation.\nExiting.\n"
       exit 1
    fi

    echo "WARNING: You are using environment settings in $BASHRC"
    source $BASHRC

    NX=$( grep NX GCHP.rc | awk '{print $2}' )
    NY=$( grep NY GCHP.rc | awk '{print $2}' )
    coreCount=$(( ${NX} * ${NY} ))
    # Note that $coreCount can be less than the requested cores in #SBATCH -n

    # Use SLURM to distribute tasks across nodes
    planeCount=$(( ${coreCount} / ${SLURM_NNODES} ))
    if [[ $(( ${coreCount} % ${SLURM_NNODES} )) > 0 ]]; then
	${planeCount}=$(( ${planeCount} + 1 ))
    fi

    # Echo info from computational cores to log file for displaying results
    echo "# of CPUs : $coreCount"
    echo "# of nodes: $SLURM_NNODES"
    echo "-m plane  : ${planeCount}"

    # Echo start date
    echo '===> Run started at' `date` >> ${log}

    # Run the simulation
    # SLURM_NTASKS is #SBATCH -n and SLURM_NNODES is #SBATCH -N above
    time srun -n ${coreCount} -N ${SLURM_NNODES} -m plane=${planeCount} --mpi=pmi2 ./geos >> ${log}

    # Echo end date
    echo '===> Run ended at' `date` >> ${log}

    # Log cap_restart
    cat cap_restart >> cap_restart.log

else
    cat runConfig.log
fi

# Clear variable
unset log

# Exit normally
exit 0

