#!/bin/bash

# runSettings.sh: Update select settings in *.rc and input.geos config files
#
# Usage: ./runSettings.sh
#
# Initial version: E. Lundgren, 8/17/2017

##########################
####  Configurables   ####
##########################

#### COMPUTE RESOURCES
NUM_NODES=1
NUM_CORES_PER_NODE=6
NY=6                  # NY must be an integer and a multiple of 6
NX=1                  # NX*NY must equal total number of cores
                      # Choose NX and NY to optimize NX x NY/6 squareness
                      # within contraint of total # of CPUs
                      # e.g., (NX=2,NY=12) if 24 cores, (NX=4,NY=12) if 48

#### INPUT MET RESOLUTION
INPUT_MET_RES=placeholder # not yet implemented

### INTERNAL CUBED-SPHERE RESOLUTION
# Please note that lightning and dust emissions in GCHP are tuned to c24.
# Removing the online resolution-dependency of lightning and dust by using
# offline lightning and dust emissions will be a future update. Until
# then, running at resolutions other than c24 will have degraded accuracy
# due to the resolution dependency of emissions. Please contact the GCST
# for more information.
CS_RES=24    # 24~4x5, 48~2x2.5, 90~1x1.25, 180~0.5x0.625
# ***IMPORTANT NOTE***
# Set read frequency of SPHU2, TMPU2, and PS2 in ExtData to match the
# dynamic timestep set below based on the run grid resolution
# (e.g. 30 minutes for c24, 10 minutes for c90, 5 minutes for c180+ )

### INITIAL RESTART FILE
INITIAL_RESTART=default  # specify default or your own restart filename

#### SIMULATION TIMES
Start_Time="{DATE1} {TIME1}"
End_Time="{DATE2} {TIME2}"
Duration="{dYYYYMMDD} {dHHmmss}"

#### DIAGNOSTIC OUTPUT FREQUENCY AND DURATION
#### frequency = frequency of diagnostic archiving
#### duration = frequency of file write
#### center = time-averaged collection
#### inst = instantaneous collection
#### Edit these collection names as needed based on actual collections names
#### in your HISTORY.rc file
center_frequency="010000"
center_duration="010000"
inst_frequency="010000"
inst_duration="010000"

#### TURN COMPONENTS ON/OFF
Turn_on_Chemistry=T
Turn_on_emissions=T
Turn_on_Dry_Deposition=T
Turn_on_Wet_Deposition=T
Turn_on_Transport=T
Turn_on_Cloud_Conv=T
Turn_on_PBL_Mixing=T
Turn_on_Non_Local_Mixing=T

#### TIMESTEPS
#### Recommendation based on grid resolution:
####    if [[ $CS_RES -lt 90 ]]; then
####        TransConv_Timestep_sec=1800
####        ChemEmiss_Timestep_sec=3600
####    elif [[ $CS_RES -lt 180 ]]; then
####        TransConv_Timestep_sec=600
####        ChemEmiss_Timestep_sec=1200
####    else
####        TransConv_Timestep_sec=300
####        ChemEmiss_Timestep_sec=600
####    fi
#### Override these recommendations with GEOS-Chem Classic timestep
#### settings if benchmarking GCHP as a comparison with GEOS-Chem Classic 
####
TransConv_Timestep_sec=600
ChemEmiss_Timestep_sec=1200

#### DEBUG OPTIONS
MAPL_DEBUG_LEVEL=0   # 0 is none, output increases with higher values (to 20)
#GC_ND70="0 all"     # requires special handling; omit for now and manually
                     # turn on ND70 in input.geos for debugging prints

###########################################
###   Stop if settings not compatible   ###
###########################################
# Give relevant warnings about timesteps in input.geos.
# Give warnings about CS resolution and timestep compatibility
# Issue any other warnings/errors regarding input.geos and/or run settings
# check that the transport settins are consistent

#### Give error if that chem timestep is < dynamic timestep
if [[ ${ChemEmiss_Timestep_sec} -lt ${TransConv_Timestep_sec} ]]; then
    echo "ERROR: chemistry timestep must be >= dynamic timestep"
    exit 1
fi

#### Check that NX*NY is less than or equal to number of cores
num_cores=$((  ))
if (( $NX*$NY > $NUM_NODES*$NUM_CORES_PER_NODE )); then
    echo "ERROR: NX*NY must not exceed number of nodes times cores per node"
    exit 1    
fi

#### Check that NY is divisible by 6
if (( $NY%6 != 0 )); then
    echo "ERROR: NY must be an integer divisible by 6"
    exit 1    
fi

#### Check if domains are square enough (NOTE: approx using integer division)
domain_ratio1=$(( $NX*6/$NY )) 
domain_ratio2=$(( $NY/$NX/6 ))
if [[ ${domain_ratio1} -ge 3 || ${domain_ratio2} -ge 3 ]] ; then
    echo "ERROR: Change NX and NY such that NX x NY/6 is more square (side ratio < 3)"
    exit 1
fi

## Check if restart file exists if using a custom file rather than default
if [[ "${INITIAL_RESTART}" != 'default' && ! -e ${INITIAL_RESTART} ]]; then
    printf 'ERROR: Restart file not in run directory: %s\n' ${INITIAL_RESTART}
    exit 1
fi

###############################
###   Update .rc Files   ###
###############################

#### Define function to replace values in .rc files
replace_val() {
    KEY=$1
    VALUE=$2
    FILE=$3
    printf '%-30s : %-20s %-20s\n' "${KEY}" "${VALUE}" "${FILE}"

    # replace value in line starting with 'whitespace + key + whitespace + : +
    # whitespace + value' where whitespace is variable length including none
    sed "s|^\([\t ]*${KEY}[\t ]*:[\t ]*\).*|\1${VALUE}|" ${FILE} > tmp
    mv tmp ${FILE}
}

#### Define transport string for GCHP.rc
if [[ ${Turn_on_Transport} == 'T' ]]; then
    ADVCORE_ADVECTION=1
elif [[ ${Turn_on_Transport} == 'F' ]]; then
    ADVCORE_ADVECTION=0
else
    echo "ERROR: Incorrect transport setting"
    exit 1
fi

#### Set # nodes and # cores
echo "Compute resources:"
replace_val NX            ${NX}                 GCHP.rc
replace_val NY            ${NY}                 GCHP.rc
replace_val CoresPerNode  ${NUM_CORES_PER_NODE} HISTORY.rc

####  set cubed-sphere resolution
echo " "
echo "Cubed-sphere resolution:"
CS_RES_x_6=$((CS_RES*6)) # Is there a better term for this?
replace_val IM        ${CS_RES}                     GCHP.rc
replace_val JM        ${CS_RES_x_6}                 GCHP.rc
replace_val npx       ${CS_RES}                     fvcore_layout.rc
replace_val npy       ${CS_RES}                     fvcore_layout.rc
replace_val GRIDNAME  PE${CS_RES}x${CS_RES_x_6}-CF  GCHP.rc
if [[ "${INITIAL_RESTART}" == 'default' ]]; then
    replace_val GIGCchem_INTERNAL_RESTART_FILE "+initial_GEOSChem_rst.c${CS_RES}_{SIMULATION}.nc" GCHP.rc
else
    replace_val GIGCchem_INTERNAL_RESTART_FILE "+${INITIAL_RESTART}" GCHP.rc
fi
replace_val GIGCchem_INTERNAL_CHECKPOINT_FILE "gcchem_internal_checkpoint_c${CS_RES}.nc" GCHP.rc

#### Set simulation start and end datetimes based on input.geos
echo " "
echo "Simulation start, end, duration:"
replace_val BEG_DATE  "${Start_Time}" CAP.rc
replace_val END_DATE  "${End_Time}"   CAP.rc
replace_val JOB_SGMT  "${Duration}"   CAP.rc

#### Set output frequency, duration, and mode
echo " "
echo "Output:"
replace_val center.frequency ${center_frequency}  HISTORY.rc
replace_val center.duration  ${center_duration}   HISTORY.rc
replace_val inst.frequency   ${inst_frequency}    HISTORY.rc
replace_val inst.duration    ${inst_duration}     HISTORY.rc

#### Set timesteps based on input.geos
echo " "
echo "Timesteps:"
replace_val HEARTBEAT_DT  ${TransConv_Timestep_sec}  GCHP.rc
replace_val SOLAR_DT      ${TransConv_Timestep_sec}  GCHP.rc
replace_val IRRAD_DT      ${TransConv_Timestep_sec}  GCHP.rc
replace_val RUN_DT        ${TransConv_Timestep_sec}  GCHP.rc
replace_val GIGCchem_DT   ${ChemEmiss_Timestep_sec}   GCHP.rc
replace_val DYNAMICS_DT   ${TransConv_Timestep_sec}  GCHP.rc
replace_val HEARTBEAT_DT  ${TransConv_Timestep_sec}  CAP.rc
replace_val dt            ${TransConv_Timestep_sec}  fvcore_layout.rc

#### Set debug level
echo " "
echo "MAPL Debug Level:"
replace_val DEBUG_LEVEL ${MAPL_DEBUG_LEVEL} CAP.rc

#### Set advection on/off based on input.geos
echo " "
echo "Advection on/off:"
replace_val AdvCore_Advection ${ADVCORE_ADVECTION} GCHP.rc

##### Set commonly changed settings in input.geos
echo "Components on/off:"
replace_val "Turn on Chemistry?"        ${Turn_on_Chemistry}        input.geos
replace_val "Turn on emissions?"	${Turn_on_emissions}        input.geos
replace_val "Turn on Transport"	        ${Turn_on_Transport}        input.geos
replace_val "Turn on Cloud Conv?"	${Turn_on_Cloud_Conv}       input.geos
replace_val "Turn on PBL Mixing?"	${Turn_on_PBL_Mixing}       input.geos
replace_val " => Use non-local PBL?"	${Turn_on_Non_Local_Mixing} input.geos
replace_val "Turn on Dry Deposition?"   ${Turn_on_Dry_Deposition}   input.geos
replace_val "Turn on Wet Deposition?"   ${Turn_on_Wet_Deposition}   input.geos
echo " "
echo "Timesteps:"
replace_val "Trans/conv Timestep [sec]"	${TransConv_Timestep_sec}   input.geos
replace_val "Chem/emis Timestep [sec]"	${ChemEmiss_Timestep_sec}   input.geos
	    



